<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>驿马西方</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-25T15:06:03.953Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lesline</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java8-lambda</title>
    <link href="http://yoursite.com/2018/08/25/java8-lambda/"/>
    <id>http://yoursite.com/2018/08/25/java8-lambda/</id>
    <published>2018-08-25T15:06:03.000Z</published>
    <updated>2018-08-25T15:06:03.953Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试整理</title>
    <link href="http://yoursite.com/2018/08/25/face/"/>
    <id>http://yoursite.com/2018/08/25/face/</id>
    <published>2018-08-25T15:05:14.098Z</published>
    <updated>2018-08-25T15:07:29.399Z</updated>
    
    <content type="html"><![CDATA[<p>年前换工作，进行了面试，准备面试的过程学习到了一些东西，在此整理出来，供大家参考。<br><a id="more"></a></p><h2 id="一：算法问题"><a href="#一：算法问题" class="headerlink" title="一：算法问题"></a>一：算法问题</h2><h3 id="1：各排序及时间复杂度（必问）"><a href="#1：各排序及时间复杂度（必问）" class="headerlink" title="1：各排序及时间复杂度（必问）"></a>1：各排序及时间复杂度（必问）</h3><hr><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">冒泡排序</th><th style="text-align:center">合并排序</th><th style="text-align:right">快速排序</th></tr></thead><tbody><tr><td style="text-align:left">最坏时间复杂度</td><td style="text-align:left">n2</td><td style="text-align:center">nlog(n)</td><td style="text-align:right">n2</td></tr><tr><td style="text-align:left">最好时间复杂度</td><td style="text-align:left">n2/n</td><td style="text-align:center">nlog(n)</td><td style="text-align:right">nlog(n)</td></tr><tr><td style="text-align:left">平均时间复杂度</td><td style="text-align:left">n2</td><td style="text-align:center">nlog(n)</td><td style="text-align:right">nlog(n)</td></tr><tr><td style="text-align:left">最坏空间复杂度</td><td style="text-align:left">1</td><td style="text-align:center">n</td><td style="text-align:right">log(n)</td></tr></tbody></table><p>上面表格中，为了便于输入，n2表示n的2次方<br>有些公司（美团、小米）会让写代码，一般能写出快排就行了。</p><h2 id="Big-O-Algorithm-Complexity-Cheat-Sheet-Know-Thy-Complexities-ericdrowell"><a href="#Big-O-Algorithm-Complexity-Cheat-Sheet-Know-Thy-Complexities-ericdrowell" class="headerlink" title="Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell"></a><a href="http://bigocheatsheet.com" target="_blank" rel="noopener">Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell</a></h2><p>代码如下：<br><a href="https://www.jianshu.com/p/7e3c7f3086b1" target="_blank" rel="noopener">冒泡排序 - 简书</a><br><a href="https://www.jianshu.com/p/4ea663346c25" target="_blank" rel="noopener">快速排序 - 简书</a><br><a href="https://www.jianshu.com/p/73c337206bad" target="_blank" rel="noopener">归并排序 - 简书</a></p><h3 id="2：链表反转（有些公司会让手写）"><a href="#2：链表反转（有些公司会让手写）" class="headerlink" title="2：链表反转（有些公司会让手写）"></a>2：链表反转（有些公司会让手写）</h3><p><a href="https://www.cnblogs.com/byrhuangqiang/p/4311336.html" target="_blank" rel="noopener">单链表反转总结篇 - BYRHuangQiang - 博客园</a></p><h3 id="3：动态规划"><a href="#3：动态规划" class="headerlink" title="3：动态规划"></a>3：动态规划</h3><p>动态规划问题有很多，这里只讨论两个问题：</p><ol><li>取子数组的最大和</li><li>01背包问题<br><a href="https://www.jianshu.com/p/ef4f5995d363" target="_blank" rel="noopener">动太规划 - 简书</a><br>其它算法参考<br><a href="http://blog.csdn.net/changyuanchn/article/details/51476281" target="_blank" rel="noopener">五大常用算法总结 - changyuanchn的专栏 - CSDN博客</a><h3 id="3：树结构（了解即可）"><a href="#3：树结构（了解即可）" class="headerlink" title="3：树结构（了解即可）"></a>3：树结构（了解即可）</h3><a href="https://www.jianshu.com/p/fbfdcb15c1f2" target="_blank" rel="noopener">树结构 - 简书</a><h3 id="3：Paxos算法（加分项）"><a href="#3：Paxos算法（加分项）" class="headerlink" title="3：Paxos算法（加分项）"></a>3：Paxos算法（加分项）</h3>本人总结在<a href="https://www.jianshu.com/p/634cac6479e8" target="_blank" rel="noopener">系统一致性 - 简书</a>中的『 2.3 分布式数据一致性的研究现状 』一章，由于paxos相对较为复杂，可参考论文及其它网上资源<br><a href="https://www.jianshu.com/p/06a477a576bf" target="_blank" rel="noopener">Paxos 算法浅析 - 简书</a><br><a href="http://www.cnblogs.com/mindwind/p/5231986.html" target="_blank" rel="noopener">Raft 为什么是更易理解的分布式一致性算法 - mindwind - 博客园</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=403582309&amp;idx=1&amp;sn=80c006f4e84a8af35dc8e9654f018ace&amp;scene=1&amp;srcid=0119gtt2MOru0Jz4DHA3Rzqy&amp;key=710a5d99946419d927f6d5cd845dc9a72ff3d652a8e66f0ddf87d91262fd262f61f63660690d2d5da76a44a29e155610&amp;ascene=0&amp;uin=MjA1MDk3Njk1&amp;devicetype=iMac+MacBookPro11%2C4+OSX+OSX+10.11.1+build(15B42" target="_blank" rel="noopener">架构师需要了解的Paxos原理、历程及实战</a>&amp;version=11020201&amp;pass_ticket=bhstP11nRHvorVXvQ4pt9fzB9Vdzj5sSRBe84783gsg%3D)</li></ol><h2 id="二：JAVA基础"><a href="#二：JAVA基础" class="headerlink" title="二：JAVA基础"></a>二：JAVA基础</h2><h3 id="1：String-类的intern方法"><a href="#1：String-类的intern方法" class="headerlink" title="1：String 类的intern方法"></a>1：String 类的intern方法</h3><p><a href="https://tech.meituan.com/in_depth_understanding_string_intern.html" target="_blank" rel="noopener">深入解析String#intern -</a></p><h3 id="2：Hashmap为什么线程不安全，及put过程，扩容过程，死循环产生的过程（必问）"><a href="#2：Hashmap为什么线程不安全，及put过程，扩容过程，死循环产生的过程（必问）" class="headerlink" title="2：Hashmap为什么线程不安全，及put过程，扩容过程，死循环产生的过程（必问）"></a>2：Hashmap为什么线程不安全，及put过程，扩容过程，死循环产生的过程（必问）</h3><p><a href="https://www.jianshu.com/p/1861130943e1" target="_blank" rel="noopener">HashMap实现原理 - 简书</a><br>参考：<br><a href="https://coolshell.cn/articles/9606.html" target="_blank" rel="noopener">疫苗：Java HashMap的死循环 | | 酷 壳 - CoolShell</a><br><a href="http://blog.csdn.net/a407625470/article/details/71080008" target="_blank" rel="noopener">HashMap多线程死循环问题 - CSDN博客</a><br>注意：HashMap 、ConcurrentHashMap 是看源码最好的入门，有数组、链表、红黑树，最好通读下源码。</p><h3 id="3：java自带的的分析问题工具"><a href="#3：java自带的的分析问题工具" class="headerlink" title="3：java自带的的分析问题工具"></a>3：java自带的的分析问题工具</h3><p>jmap<br>jvisualvm<br>jconsole<br>Jstack简单使用，定位死循环、线程阻塞、死锁等问题<br><a href="https://jingyan.baidu.com/article/4f34706e3ec075e387b56df2.html" target="_blank" rel="noopener">高手是怎么使用jstack精确找到异常代码的_百度经验</a><br><a href="http://ginobefunny.com/post/deep_in_jvm_notes_part3/" target="_blank" rel="noopener">《深入理解Java虚拟机》读书笔记3：虚拟机性能监控与调优实战 | GinoBeFunny</a></p><h3 id="4：如果系统宕机，可以通过分析jvm中的内存对象，查找问题"><a href="#4：如果系统宕机，可以通过分析jvm中的内存对象，查找问题" class="headerlink" title="4：如果系统宕机，可以通过分析jvm中的内存对象，查找问题"></a>4：如果系统宕机，可以通过分析jvm中的内存对象，查找问题</h3><ol><li>jvm设置:-XX:+HeapDumpOnOutOfMemoryError —宕机时dump生成的.hprof文件</li><li>用工具分析:内存分析工具MAT(Memory Analyzer Tool)、IBM HeapAnalyzer<h3 id="5：jdk1-8新特性"><a href="#5：jdk1-8新特性" class="headerlink" title="5：jdk1.8新特性"></a>5：jdk1.8新特性</h3><a href="http://blog.didispace.com/books/java8-tutorial/ch1.html" target="_blank" rel="noopener">Java 8 简明教程 · Java 8简明教程</a><h3 id="6-内存结构和垃圾回收算法及垃圾回收器适用场景"><a href="#6-内存结构和垃圾回收算法及垃圾回收器适用场景" class="headerlink" title="6.内存结构和垃圾回收算法及垃圾回收器适用场景"></a>6.内存结构和垃圾回收算法及垃圾回收器适用场景</h3><a href="https://www.jianshu.com/p/a8f1c506ec81" target="_blank" rel="noopener">jvm总结 - 简书</a><h3 id="7：多线程问题"><a href="#7：多线程问题" class="headerlink" title="7：多线程问题"></a>7：多线程问题</h3>多线程的问题范围比较多，这里列出常面试的两点：<h5 id="1、线程池原理及怎么设置更合理"><a href="#1、线程池原理及怎么设置更合理" class="headerlink" title="1、线程池原理及怎么设置更合理"></a>1、线程池原理及怎么设置更合理</h5><strong>线程池的两个参数解释</strong><br>（<strong>注意：maximumPoolSize是在队列满时才会以此为最大数创建新线程</strong>）：<br><strong>corePoolSize</strong>：线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize；如果当前线程数为corePoolSize，继续提交的任务被保存到阻塞队列中，等待被执行；如果执行了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有核心线程。<br><strong>maximumPoolSize</strong>：线程池中允许的最大线程数。如果当前阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于maximumPoolSize。<br><strong>设置线程池大小</strong><br>设置线程池大小要考虑是cpu密集型还是io密集型，精细化设置的话还要考虑：线程等待时间、线程CPU时间。<br><a href="http://blog.csdn.net/u011519624/article/details/69263460" target="_blank" rel="noopener">如何合理设置线程池大小 - CSDN博客</a></li></ol><h5 id="2、关键字及工多线程工具类"><a href="#2、关键字及工多线程工具类" class="headerlink" title="2、关键字及工多线程工具类"></a>2、关键字及工多线程工具类</h5><p>ThreadLocal：<a href="http://mp.weixin.qq.com/s/5gkK_dwDPAOrtHYSLsQzUA" target="_blank" rel="noopener">Java面试必问，ThreadLocal终极篇</a><br>volatile:<a href="https://www.jianshu.com/p/506c1e38a922" target="_blank" rel="noopener">面试必问的volatile，你了解多少？ - 简书</a><br>CountDownLatch/CyclicBarrier/Semaphore</p><h3 id="8：NIO-AIO问题"><a href="#8：NIO-AIO问题" class="headerlink" title="8：NIO AIO问题"></a>8：NIO AIO问题</h3><p>实际工作中很少直接使用NIO，面试时问NIO很多情况下会引入netty，netty除了网上相关资料（推荐「占小狼的博客」），可以看『netty权威指南』和『netty实战』</p><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><h3 id="Ioc-aop原理"><a href="#Ioc-aop原理" class="headerlink" title="Ioc aop原理"></a>Ioc aop原理</h3><p>待整理</p><h3 id="拦截器是怎么实现"><a href="#拦截器是怎么实现" class="headerlink" title="拦截器是怎么实现"></a>拦截器是怎么实现</h3><p>待整理</p><h3 id="Spring事务传播机制"><a href="#Spring事务传播机制" class="headerlink" title="Spring事务传播机制"></a>Spring事务传播机制</h3><p>网上很多</p><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="Mybatis与-与-区别（容易记反）"><a href="#Mybatis与-与-区别（容易记反）" class="headerlink" title="Mybatis与$与#区别（容易记反）"></a>Mybatis与$与#区别（容易记反）</h3><p><a href="https://www.cnblogs.com/dato/p/7027949.html" target="_blank" rel="noopener">浅谈 Mybatis中的 ${ } 和 #{ }的区别 - 大头就是我 - 博客园</a></p><h2 id="中间件应用"><a href="#中间件应用" class="headerlink" title="中间件应用"></a>中间件应用</h2><h3 id="1：分库分表"><a href="#1：分库分表" class="headerlink" title="1：分库分表"></a>1：分库分表</h3><p>如何分库分表及sharding-jdbc分库分表后如何实现分页：<br><a href="https://www.jianshu.com/p/ee42aba04a64" target="_blank" rel="noopener">sharding-jdbc 按时间分库分表 - 简书</a></p><h3 id="2：dubbo原理和热部署"><a href="#2：dubbo原理和热部署" class="headerlink" title="2：dubbo原理和热部署"></a>2：dubbo原理和热部署</h3><p>参考dubbo官网<br><a href="http://dubbo.io/" target="_blank" rel="noopener">Overview | DUBBO</a></p><h3 id="3：zookeeper选举算法及分布式锁实现"><a href="#3：zookeeper选举算法及分布式锁实现" class="headerlink" title="3：zookeeper选举算法及分布式锁实现"></a>3：zookeeper选举算法及分布式锁实现</h3><p>参考在<a href="https://www.jianshu.com/p/634cac6479e8" target="_blank" rel="noopener">系统一致性 - 简书</a>中的『 2.3.2 Paxos实践应用-&gt;ZAB协议-&gt;选主阶段（Leader election）』一章<br>排它锁：建临时节点<br>同享锁：建临时顺序节点（具体可参考&lt;从paxos到zookeeper&gt;一书）</p><h3 id="4：redis数据结构及分布式锁的实现方式"><a href="#4：redis数据结构及分布式锁的实现方式" class="headerlink" title="4：redis数据结构及分布式锁的实现方式"></a>4：redis数据结构及分布式锁的实现方式</h3><p><a href="https://www.jianshu.com/p/da41fe072d11" target="_blank" rel="noopener">redis分布式锁实现 - 简书</a><br><strong>单机实现：</strong><br>通过set命令加NX/PX参数实现加锁<br>jedis.set(lockKey, requestId, “NX”, “PX”, expireTime);<br>requestId：可为UUID，删除时使用<br>通过del命令解锁：<br>String script = “if redis.call(‘get’, KEYS[1]) == ARGV[1] then return redis.call(‘del’, KEYS[1]) else return 0 end”;<br>Lua脚本调用保证命令的原子性<br>通过判断requestId（可为UUID），是否为本线程，防止其它线程误删。<br><strong>集群实现：</strong><br>Redlock算法：类似paxos算法，拥有N个Redis master节点的集群，只有超过半数的结点获取锁成功后，认为锁成功。<br><a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">Distributed locks with Redis – Redis</a><br><a href="http://ifeve.com/redis-lock/" target="_blank" rel="noopener">《Redis官方文档》用Redis构建分布式锁 | 并发编程网 – ifeve.com</a></p><h3 id="5：mq如何保证不丢失消息"><a href="#5：mq如何保证不丢失消息" class="headerlink" title="5：mq如何保证不丢失消息"></a>5：mq如何保证不丢失消息</h3><p>mq信息要固化到硬盘或数据库<br>可参考<a href="https://www.jianshu.com/p/634cac6479e8" target="_blank" rel="noopener">系统一致性 - 简书</a>中的『 2.2.5事件驱动模式 』一章</p><h3 id="6：更新缓存与db同步"><a href="#6：更新缓存与db同步" class="headerlink" title="6：更新缓存与db同步"></a>6：更新缓存与db同步</h3><p>缓存与db属于不同的两个系统，我们知道绝对的数据一致性是不可以的，重点是如何保证最终的一致性，而不影响使用<br>缓存和db的读写先后问题网上有很多讨论，实际应用中各种方式都有，可以确定的原则有两点：<br>1、为了防止空值信息每次都击穿缓存到数据库，增加NullObject(空对象）：如果一个查询在缓存中没有，在数据库中也没有，这样每次都会对击穿数据库进行查询，造成DB负载过大<br>2、尽量设置过期时间，缓存资源有限，防止无效数据一直占用资源。当然也看到有些特例，有些场景面要让数据一直在缓存中，可能通过定时任务，在缓存失效前重置失效时间。</p><h3 id="7：Redis与Memcached区别："><a href="#7：Redis与Memcached区别：" class="headerlink" title="7：Redis与Memcached区别："></a>7：Redis与Memcached区别：</h3><p>1: Memcached 只支持key/value；Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><blockquote><p>redis 哈希（散列）： 相当于hashmap<br>eg:HSET key field value(HSET car price 500)<br>redis 列表： 相当于 对队queue<br>eg:LPUSH key value(LPUSH numbers 1)<br>redis 集合： 相当于set<br>eg:SADD key member (SADD letters a)<br>redis 有序集合：相当于sorted set:加入分数，通过散列表和跳跃表实现<br>eg:zadd key score member(ZADD scordboard 89 tom)</p></blockquote><p>2: 在Redis中，并不是所有的数据都一直存储在内存中的，Memcached是。<br>3：redis可以定期保存到磁盘（持久化），Memcached不能。<br>4：Memcached是多线程，非阻塞IO复用的网络模型，Redis使用单线程的IO复用模型。<br>还有其它区别，具体搜索网上资料</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="mysql不同引擎的区别，数据结构，事务隔离级别以及如何实现隔离"><a href="#mysql不同引擎的区别，数据结构，事务隔离级别以及如何实现隔离" class="headerlink" title="mysql不同引擎的区别，数据结构，事务隔离级别以及如何实现隔离"></a>mysql不同引擎的区别，数据结构，事务隔离级别以及如何实现隔离</h3><p><a href="https://www.jianshu.com/p/844fa04ee031" target="_blank" rel="noopener">数据库隔离级别 - 简书</a></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>sql优化、索引、组合索引相关</p><h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h2><p>一般做后端的前端都较弱，所有在面试官在问前端知识时，你可以回答解题的思路，具体函数名、参数什么的网上搜索相关开发手册就行。</p><h3 id="js闭包"><a href="#js闭包" class="headerlink" title="js闭包"></a>js闭包</h3><p>这里特别提下闭包，毕竟这点跟java有很大区别<br><a href="https://kb.cnblogs.com/page/110782/" target="_blank" rel="noopener">Javascript闭包——懂不懂由你，反正我是懂了<em>知识库</em>博客园</a><br><a href="https://www.cnblogs.com/ywqbj/p/5822644.html" target="_blank" rel="noopener">Java8闭包 - yanweiqi - 博客园</a><br><a href="http://blog.csdn.net/yztbydh/article/details/76270708" target="_blank" rel="noopener">闭包(Java中的闭包) - CSDN博客</a></p><h2 id="开放性问题："><a href="#开放性问题：" class="headerlink" title="开放性问题："></a>开放性问题：</h2><h3 id="1、看了哪些书"><a href="#1、看了哪些书" class="headerlink" title="1、看了哪些书"></a>1、看了哪些书</h3><h3 id="2、遇到哪些难题，怎么解决的"><a href="#2、遇到哪些难题，怎么解决的" class="headerlink" title="2、遇到哪些难题，怎么解决的"></a>2、遇到哪些难题，怎么解决的</h3><h3 id="3、哪方面你最擅长，讲一下-你有什么优势"><a href="#3、哪方面你最擅长，讲一下-你有什么优势" class="headerlink" title="3、哪方面你最擅长，讲一下/你有什么优势"></a>3、哪方面你最擅长，讲一下/你有什么优势</h3><p>这些问题较为开放，面试次数多了就有经验了，不过尽量还是提前组织一下语言。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><h3 id="推荐书籍："><a href="#推荐书籍：" class="headerlink" title="推荐书籍："></a>推荐书籍：</h3><ol><li>java并发编程实战（重理论）</li><li>java并发编程的艺术（重使用）</li><li>spring源码深度解析</li><li>Spring实战(Spring Boot实战）</li><li>重构</li><li>代码整洁之道<br>还有其它书籍，但这几本看时最为舒畅，本人以为好的书满足两个条件：一是问题讲清楚，二是用最简单的方式进行讲述。这几本满足这两个条件。<h3 id="网站及博客"><a href="#网站及博客" class="headerlink" title="网站及博客"></a>网站及博客</h3>推荐一个网站、一个博客，特别是占小狼的博客，里面即有技术的总结，还有一些方法的推荐，有空尽量都过一遍：<br><a href="https://tech.meituan.com/" target="_blank" rel="noopener">https://tech.meituan.com/</a><br><a href="https://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="noopener">占小狼 - 简书</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年前换工作，进行了面试，准备面试的过程学习到了一些东西，在此整理出来，供大家参考。&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="http://yoursite.com/2018/08/25/hexo/"/>
    <id>http://yoursite.com/2018/08/25/hexo/</id>
    <published>2018-08-25T15:04:33.574Z</published>
    <updated>2018-08-25T15:06:50.909Z</updated>
    
    <content type="html"><![CDATA[<p>hexo搭建相对简单，并且有丰富的主题。<br><a id="more"></a></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>安装node<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nodejs安装</span><br><span class="line">1、访问nodejs官网，点击蓝色选框区域稳定版，</span><br><span class="line">并下载https://nodejs.org/en/</span><br><span class="line">2、安装完成后打开终端，输入 </span><br><span class="line">npm -v </span><br><span class="line">node -v </span><br><span class="line">两个命令，如下图出现版本信息，说明安装成功。</span><br></pre></td></tr></table></figure></li></ol><p><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Node.js 安装配置 | 菜鸟教程</a></p><ol start="2"><li>安装hexo<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;postName&quot; #新建文章</span><br><span class="line">$ hexo new page &quot;pageName&quot;#新建页面</span><br><span class="line"></span><br><span class="line">常用简写</span><br><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br><span class="line"></span><br><span class="line">$ hexo d -g #生成部署</span><br><span class="line">$ hexo s -g #生成预览</span><br></pre></td></tr></table></figure><h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、下载主题到themes/next目录</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line">2、修改_config.yml主题设置</span><br><span class="line">theme: next</span><br><span class="line">3、进入站点根目录/themes/next/_config.yml</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo的Next主题详细配置 - 简书</a></p><h3 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h3><p><a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></p><p><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/6E468444-7658-4F23-AA45-3ADEF22B0FFD.png" alt=""></p><h3 id="绑定域名："><a href="#绑定域名：" class="headerlink" title="绑定域名："></a>绑定域名：</h3><ol><li>申请域名<br><a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">域名注册<em>虚拟主机</em>云服务器_企业邮箱-万网-阿里云旗下品牌</a><br><img src="%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/FE6DB3C9-D45E-49B9-858B-27BC7DA4DF2C.png" alt=""></li></ol><blockquote><p><a href="http://lesline.top.com/" target="_blank" rel="noopener">http://lesline.top.com/</a><br><a href="http://lesline.github.io/" target="_blank" rel="noopener">http://lesline.github.io/</a>  </p><ol start="2"><li>增加文件：<br>/Users/zhangshaolin/git/hexo/blog/source/CNAME<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lesline.top</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol start="3"><li>blog配置文件_config.yml下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:lesline/lesline.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>Hexo Next 更换scheme，本地查看成功，部署后访问依然未变化？<br>先clean 再deploy<br>hexo clean<br>hexo g<br>hexo d</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://tengj.top/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/" target="_blank" rel="noopener">Category: hexo干货系列 | 嘟嘟独立博客</a><br><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客 | 令狐葱@前端笔记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo搭建相对简单，并且有丰富的主题。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>GIT 分支管理</title>
    <link href="http://yoursite.com/2018/08/09/git-branch/"/>
    <id>http://yoursite.com/2018/08/09/git-branch/</id>
    <published>2018-08-09T01:09:24.000Z</published>
    <updated>2018-08-09T01:13:05.691Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考阿里与京东的分支管理做了一下整理。<br><a id="more"></a></p><p>参考：<br><a href="https://mp.weixin.qq.com/s/JsBX3UPgZL_HUOTCIopr_A" target="_blank" rel="noopener">在阿里，我们如何管理代码分支？</a><br><a href="https://www.cnblogs.com/sloong/p/5868292.html" target="_blank" rel="noopener">GitHub Flow  &amp; Git Flow  基于Git 的两种协作开发模式 - sloong - 博客园</a></p><h2 id="TrunkBased-模式：持续集成"><a href="#TrunkBased-模式：持续集成" class="headerlink" title="TrunkBased 模式：持续集成"></a>TrunkBased 模式：持续集成</h2><p><a href="https://paulhammant.com/2013/04/05/what-is-trunk-based-development/" target="_blank" rel="noopener">What is Trunk-Based Development?</a><br><a href="http://www.ruanyifeng.com/blog/2016/07/google-monolithic-source-repository.html" target="_blank" rel="noopener">谷歌的代码管理 - 阮一峰的网络日志</a></p><p>TrunkBased 模式是持续集成思想所崇尚的工作方式，它由单个主干分支和许多发布分支组成，每个发布分支在特定版本的提交点上从主干创建出来，用来进行上线部署和 Hotfix。<br>不能满足多版本并行开发，主要用在不需要同时维护多个历史版本的 SaaS 型项目，特别是经过微服务改造的各种小型服务上。<br>OneFlow 模式：参考了 TrunkBased 的许多思想，对操作流程做了更严格的定义，增加了 Hotfix 分支等内容。<br>多主干模式：通常是双主干，固定的开发分支和固定的发布分支，算是 TrunkBased 采用固定发布分支的特例。<br>GithubFlow 模式：在 TrunkBased 的基础上，增加了个人仓库和 Pull Request 合并代码的操作。</p><h2 id="GitFlow模式：管理需求"><a href="#GitFlow模式：管理需求" class="headerlink" title="GitFlow模式：管理需求"></a>GitFlow模式：管理需求</h2><p><a href="https://segmentfault.com/a/1190000002918123" target="_blank" rel="noopener">深入理解学习Git工作流（git-workflow-tutorial） - 程序生涯 - SegmentFault 思否</a><br>GitFlow模式相对强大：</p><h3 id="应用一："><a href="#应用一：" class="headerlink" title="应用一："></a>应用一：</h3><p>1 master分支<br>主分支，产品的功能全部实现后，最终在master分支对外发布。<br>2 develop分支<br>开发分支，基于master分支克隆，产品的编码工作在此分支进行。<br>3 release分支<br>测试分支，基于delevop分支克隆，产品编码工作完成后，发布到本分支测试，测试过程中发现的小bug直接在本分支进行修复，修复完成后合并到develop分支。本分支属于临时分支，目的实现后可删除分支。<br>4 bugfix分支<br>Bug修复分支，基于master分支或发布的里程碑Tag克隆，主要用于修复对外发布的分支，收到客户的Bug反馈后，在此分支进行修复，修复完毕后分别合并到develop分支和master分支。本分支属于临时分支，目的实现后可删除分支。<br>5 feature分支<br>功能特征分支，基于develop分支克隆，主要用于多人协助开发场景或探索性功能验证场景，功能开发完毕后合并到develop分支。feature分支可创建多个，属于临时分支，目的实现后可删除分支。<br><img src="https://upload-images.jianshu.io/upload_images/1117220-d842d5aa6070b43b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gitflow模型.png"></p><h4 id="主要问题有："><a href="#主要问题有：" class="headerlink" title="主要问题有："></a>主要问题有：</h4><p>::1、如果测试后不上线，Develop分支与线上分支不一致，如果需要develop分支与master一致就需要频繁重建develop分支或回滚。::<br>::2、另外release merge到Master时，代码冲突严重。::</p><h3 id="应用二："><a href="#应用二：" class="headerlink" title="应用二："></a>应用二：</h3><p>与应用一的区别是：建立发布分支用于发布，发布后合并master。<br>1、共一个主干分支master<br>2、N个特性分支==N个发布分支（特性分支开发完成后，直接转测，直接转为发布分支）<br>3、不定期的更新主干分支</p><h4 id="主要问题有：-1"><a href="#主要问题有：-1" class="headerlink" title="主要问题有："></a>主要问题有：</h4><p>::1、主干分支常常跟不上线上环境的代码::<br>::2、大量的合并突冲，集成测试不友好::</p><h2 id="TrunkBased与GitFlow比较："><a href="#TrunkBased与GitFlow比较：" class="headerlink" title="TrunkBased与GitFlow比较："></a>TrunkBased与GitFlow比较：</h2><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p> TrunkBased “易于持续集成” ; GitFlow “易于管理需求”</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>TrunkBased缺点：不能很好支持多版本的并行开发<br>GitFlow的问题：合并冲突</p><h2 id="阿里分支管理AoneFlow"><a href="#阿里分支管理AoneFlow" class="headerlink" title="阿里分支管理AoneFlow"></a>阿里分支管理AoneFlow</h2><p>   在 AoneFlow 上你能看到许多其他分支模式的影子。它基本上兼顾了 TrunkBased 的“易于持续集成”和 GitFlow 的“易于管理需求”特点，同时规避掉 GitFlow 的那些繁文缛节。<br><img src="https://upload-images.jianshu.io/upload_images/1117220-1beeec959db3711a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AoneFlow.jpg"></p><p><strong>1、开始工作前，从主干创建特性分支。</strong><br><img src="https://upload-images.jianshu.io/upload_images/1117220-3445f8c9310f4876.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AoneFlow-add feature.png"></p><p><strong>2、通过合并特性分支，形成发布分支。</strong><br><img src="https://upload-images.jianshu.io/upload_images/1117220-5a675e4c836c65bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AoneFlow-add-release.png"></p><p><strong>3、发布到线上正式环境后，合并相应的发布分支到主干，在主干添加标签，同时删除该发布分支关联的特性分支。</strong><br><img src="https://upload-images.jianshu.io/upload_images/1117220-7e1cfb6f2e70476f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AoneFlow-merge master.png"></p><h2 id="京东分支管理："><a href="#京东分支管理：" class="headerlink" title="京东分支管理："></a>京东分支管理：</h2><h4 id="分支分类："><a href="#分支分类：" class="headerlink" title="分支分类："></a>分支分类：</h4><p>master：主分支，与线上保持一致。永久保留。<br>dev：开发分支，相对稳定分支。永久保留。dev分支与master强一致<br>dev-pretest ： 测试和预上线分支，必要的时候删除从dev拉取。<br>feat-人名全拼或者姓名首字母-功能描述： 功能分支。如; feat-sunweiwei-cancelorder或者feat-sww-cancelorder，标注开发人员+该分支的功能。用完即删。<br>hotfox-人名全拼或者姓名首字母-功能描述：线上bug修复分支。如：hotfix-sunweiwei-orderpay或者feat-sww-orderpay，标注开发人员+该分支处理的问题。用完即删。<br>分支名称统一都是小写字母。</p><p><img src="https://upload-images.jianshu.io/upload_images/1117220-755aaf367d450122.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jd.jpg"></p><h3 id="京东与阿里的比较"><a href="#京东与阿里的比较" class="headerlink" title="京东与阿里的比较"></a>京东与阿里的比较</h3><p>相同：都从主干拉取分支，再合并特性分支，减少了合并冲突<br>不同：京东是直接在master分支上发布，阿里是新建发布分支，发布成功后合并到master，<br>两种方式导致的结果是：阿里支持“修改历史版本bug”的功能，京东不支持。</p><p>  ::总的来说，京东偏向TrunkBased 模式，阿里偏向Gitflow模式，由于京东模式缺少明确的发布分支，只在主干分支上发布，导致不支持多版本，如果要修改历史版本的bug，只能升级到最新版本。::</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>::1、对于微服务中小型服务（或只是一个jar工具包），这种修改后立刻可以上线使用，且不影响线上服务的情况，用TrunkBased 模式即可::<br>::2、如果系统不支持多版本修复（需要修复升级到最新版本即可），使用京东方式即可。如果有多版本支持使用阿里方式。::</p><p>以上讨论基于如下需求：<br>1、多功能同时测试<br>2、测试后可能不上线</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文参考阿里与京东的分支管理做了一下整理。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo_plug</title>
    <link href="http://yoursite.com/2018/08/09/hexo-plug/"/>
    <id>http://yoursite.com/2018/08/09/hexo-plug/</id>
    <published>2018-08-09T00:25:54.000Z</published>
    <updated>2018-08-09T00:25:54.910Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bear Pro</title>
    <link href="http://yoursite.com/2018/07/30/bear/"/>
    <id>http://yoursite.com/2018/07/30/bear/</id>
    <published>2018-07-29T17:14:02.979Z</published>
    <updated>2018-08-25T15:07:50.403Z</updated>
    
    <content type="html"><![CDATA[<p>这是教程的最后一部分！ 你可以查看 Bear 教程的其他章节，[[欢迎来到 Bear]] 和 [[管理与发布]]。<br><a id="more"></a></p><h2 id="附加功能"><a href="#附加功能" class="headerlink" title="附加功能"></a>附加功能</h2><p>你可以在 iPad、iPhone 和 Mac 上使用 Bear 绝大多数的核心功能。 我们希望这独特的工具能让所有人都写出漂亮、整洁的笔记。</p><p>如果你想要解锁附加功能和漂亮的主题，并支持 Bear 的持续开发，你可以在应用内订阅 <a href="bear://x-callback-url/open-bear-pro" target="_blank" rel="noopener">Bear Pro</a>。  订阅 Bear Pro 即可解锁：</p><ul><li>在 iPad、iPhone 和 Mac 上的 Bear 之间 <em>同步</em> 所有笔记。 本服务由 CloudKit 提供。 在 [[管理与发布]] 中了解更多关于 Bear 同步和自动保存的内容。 </li><li>以多种文件格式 <em>导出</em> 并随意发布和分享。</li><li><em>漂亮的主题</em> - 目前已发布 8 款，更多即将到来。主题为你提供适合、舒服的写作环境，激发你的创造力。</li></ul><p>Bear Pro 提供免费试用。 包月订阅服务将赠送你一周免费试用期。 包年订阅服务则赠送一个月免费试用期。 在 iPad、iPhone 和 Mac 上的的应用内设置菜单中了解 <a href="bear://x-callback-url/open-bear-pro" target="_blank" rel="noopener">Bear Pro</a>。</p><h2 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h2><p>在 Bear 中可即时搜索所有笔记，我们也提供一些 <em>特殊搜索</em> 功能，帮助你找到笔记中的特定内容。</p><p>例如，你可以将仍然需要执行的计划任务写在笔记中。 在 iOS 中，将快捷工具条左滑，选择任务按钮（中间有对勾的方块）。 在 Mac 上，则选择格式 -&gt; 待办事项 -&gt; 切换。</p><p>现在，在 Bear 的搜索框中，你可以输入 “@todo” 或 “@task” 来查找尚未完成的任务。 同时，你可以通过搜索 “@done” 找到已经完成的任务内容。</p><p>Bear 支持的搜索命令有：“@todo、@task、@done、@code、@tagged、@untagged、@files、@images、@attachments”。<br><a href="https://vimeo.com/182400202" target="_blank" rel="noopener">查看此视频</a> 了解 Bear 的搜索功能如何使用。</p><p>最后，你还可以使用英文双引号来精确搜索词语，例如：「”bear is cool”」。</p><h2 id="小技巧-🎩"><a href="#小技巧-🎩" class="headerlink" title="小技巧 🎩"></a>小技巧 🎩</h2><p>Bear 中所有的标签都可长按。 试试看，隐藏键盘后长按#欢迎/pro#包含此标签的所有笔记列表即会出现。</p><p>在 Mac 上，你可以隐藏侧边栏和/或笔记列表，享受无干扰的写作环境（iOS 上自动提供这种环境 😉）。 使用 <em>布局选择器</em> （右下角图标）查看可用选项</p><h2 id="反馈-💬"><a href="#反馈-💬" class="headerlink" title="反馈 💬"></a>反馈 💬</h2><p>我们/希望/了解你的反馈，发信到 <a href="mailto:bear@shinyfrog.net" target="_blank" rel="noopener">bear@shinyfrog.net</a>。 </p><p>感谢使用 Bear，祝你写作愉快！</p><p>🎉 🐻 🎉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是教程的最后一部分！ 你可以查看 Bear 教程的其他章节，[[欢迎来到 Bear]] 和 [[管理与发布]]。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/29/hello-world/"/>
    <id>http://yoursite.com/2018/07/29/hello-world/</id>
    <published>2018-07-29T12:44:50.161Z</published>
    <updated>2018-08-09T01:12:08.505Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
